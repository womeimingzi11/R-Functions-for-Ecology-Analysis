return(Tukey.labels)
}
vt<-X
X<-vt
Y<-abd
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
library(multcompView)
library(plotrix)
ordered(X)
model<-lm(Y~X)
ANOVA<- aov(model)
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
LABELS=generate_label_df(TUKEY,"X")
LABELS=generate_label_df(TUKEY,"ordered(X)")
test<-ordered(X)
LABELS=generate_label_df(TUKEY,"test")
?TukeyHSD
TUKEY
TUKEY$X
View(TUKEY)
generate_label_df <- function(TUKEY, variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- TUKEY[[variable]][,4]
Tukey.labels <- data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
return(Tukey.labels)
}
generate_label_df(TUKEY,abv_geo_rmM21_5_M11_3_divide_into_M_S_$vt)
anova()
ANOVA
summary(anova)
summary(ANOVA)
plot(ANOVA)
plot(ANOVA)
boxplot(ANOVA)
boxplot(Y~X)
boxplot(coverage~X)
boxplot(spRich~X)
anova(coverage~X)
anova(lm(overage~X))
anova(lm(coverage~X))
anova(lm(spRich~X))
anova(lm(coverage~X))
summary(lm(coverage~X))
?boxplot()
?boxplot
boxplot(spRich~X,ylab="Species Richness",xlab = "Vegetation Type")
pV<-round(lmp(spRich~X),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
pV<-round(lmp(lm(spRich~X)),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
pV
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
boxplot(abd~X,ylab="Abundance",xlab = "Vegetation Type")
pV<-round(lmp(lm(abd~X)),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
boxplot(coverage~X,ylab="Abundance",xlab = "Vegetation Type")
pV<-round(lmp(lm(coverage~X)),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
influence.measures(lm(coverage~X))
summary(influence.measures(lm(coverage~X)))
test<-summary(influence.measures(lm(coverage~X)))
row.names(test)
as.numeric(row.names(test))
as.numeric(
row.names(
summary(
influence.measures(
lm(coverage~X)
)
)
)
)
reMV<-as.numeric(
row.names(
summary(
influence.measures(
lm(coverage~X)
)
)
)
)
lm(coverage[-reMV]~X[-reMV])
lm<-lm(coverage[-reMV]~X[-reMV])
boxplot(lm,ylab="Abundance",xlab = "Vegetation Type")
pV<-round(lmp(lm),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
boxplot(lm,ylab="Abundance",xlab = "Vegetation Type")
pV<-round(lmp(lm),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
lm.cover<-lm(coverage[-reMV]~X[-reMV])
View(lm.cover)
boxplot(lm.cover,ylab="Abundance",xlab = "Vegetation Type")
boxplot(coverage~X,ylab="Abundance",xlab = "Vegetation Type")
boxplot(coverage~X,ylab="Coverage",xlab = "Vegetation Type")
pV<-round(lmp(lm.cover),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
boxplot(coverage[-reMV]~XX[-reMV],ylab="Abundance",xlab = "Vegetation Type")
reMV<-as.numeric(
row.names(
summary(
influence.measures(
lm.cover
)
)
)
)
lm.cover = lm(abv_geo_rmM21_5_M11_3_divide_into_M_S_$coverage~abv_geo_rmM21_5_M11_3_divide_into_M_S_$vt)
reMV<-as.numeric(
row.names(
summary(
influence.measures(
lm.cover
)
)
)
)
(coverage[-reMV]~XX[-reMV],ylab="Abundance",xlab = "Vegetation Type")
coverage[-reMV]
boxplot(coverage[-reMV]~X[-reMV],ylab="Coverage",xlab = "Vegetation Type")
pV<-round(lmp(lm.coverage),5)
pV<-round(lmp(lm.cover),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
# The Y is Response Var, X is Indp Var, Y is the Name of Y letter, X is so,
#the rev is to control what's the order of the mark. Which in the function:
#if (rev) {
#Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
TukeyTestFigure<- function(Y,X,Yletter,Xletter,rev = TRUE){
library(multcompView)
library(plotrix)
# Function to calculate the p value of F-test  (with Library(multcompView))
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
# Function to get the a-b-c letter by TUKEY test
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
if (rev) {
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
X<-as.factor(X)
# Dive the X factor into group
#X <- ordered(X,levels = Group)
#X<-Group
# Make the ANOVA
model<-lm(Y~X)
ANOVA<- aov(model)
# Make the Tukey test
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
# get the Letter Label
LABELS=generate_label_df(TUKEY,'X')
my_colors=c( rgb(143,199,74,maxColorValue = 255),rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255),rgb(254,188,18,maxColorValue = 255) , rgb(74,132,54,maxColorValue = 255))
# plot the Boxplot
a=boxplot(Y~X,ylim=c(min(Y),1.3*max(Y)),col=my_colors[as.numeric(LABELS[,1])],ylab=Yletter,xlab=Xletter)
over=0.1*max(a$stats[nrow(a$stats),])
text(c(1:nlevels(X)),a$stats[nrow(a$stats),]+over,LABELS[,1] ,col=my_colors[as.numeric(LABELS[,1])])
# Draw the F and P value  (with Library(plotrix))
pV<-round(lmp(model),5)
pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
#b<-c("P < 0.01")
#c<-c("P =",pV)
#d<-ifelse(pV < 0.01,b,c)
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
}
library(readxl)
abv_S <- read_excel("~/Desktop/AboveVegetation/abv-geo(rmM21-5|M11-3).xlsx",
sheet = "S")
View(abv_S)
atttach(abv_S)
attach(abv_S)
TukeyTestFigure(coverage,vt,"Y","X")
TukeyTestFigure(abv_S$coverage,abv_S$vt,"Y","X")
TukeyTestFigure(abv_S$coverage,abv_S$vt,"Y","X",rev= FALSE)
reMV<-as.numeric(
row.names(
summary(
influence.measures(
lm(abv_S$coverage,abv_S$vt)
)
)
)
)
lm.cover <- lm(abv_S$coverage,abv_S$vt)
lm.cover <- lm(abv_S$coverage~abv_S$vt)
reMV<-as.numeric(
row.names(
summary(
influence.measures(
lm.cover
)
)
)
)
TukeyTestFigure(abv_S$coverage[-reMV],abv_S$vt[-reMV],"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage,abv_S$vt,"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage[-c(22,18,19)],abv_S$vt[-c(22,18,19)],"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage,abv_S$vt,"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
lmp(lm.cover)
lmp(lm(abv_S$coverage[-c(11,7,8)]~abv_S$vt[-c(11,7,8)]))
# The Y is Response Var, X is Indp Var, Y is the Name of Y letter, X is so,
#the rev is to control what's the order of the mark. Which in the function:
#if (rev) {
#Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
TukeyTestFigure<- function(Y,X,Yletter,Xletter,rev = TRUE){
library(multcompView)
library(plotrix)
# Function to calculate the p value of F-test  (with Library(multcompView))
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
# Function to get the a-b-c letter by TUKEY test
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
if (rev) {
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
X<-as.factor(X)
# Dive the X factor into group
#X <- ordered(X,levels = Group)
#X<-Group
# Make the ANOVA
model<-lm(Y~X)
ANOVA<- aov(model)
# Make the Tukey test
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
# get the Letter Label
LABELS=generate_label_df(TUKEY,'X')
my_colors=c( rgb(143,199,74,maxColorValue = 255),rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255),rgb(254,188,18,maxColorValue = 255) , rgb(74,132,54,maxColorValue = 255))
# plot the Boxplot
a=boxplot(Y~X,ylim=c(min(Y),1.3*max(Y)),col=my_colors[as.numeric(LABELS[,1])],ylab=Yletter,xlab=Xletter)
over=0.1*max(a$stats[nrow(a$stats),])
text(c(1:nlevels(X)),a$stats[nrow(a$stats),]+over,LABELS[,1] ,col=my_colors[as.numeric(LABELS[,1])])
# Draw the F and P value  (with Library(plotrix))
pV<-round(lmp(model),5)
if (pv < 0.01) {
pv<-c("P < 0.01")
} else {
pv<-c("P =",pV)
}
#  pv<-if(pv < 0.01
# pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
#b<-c("P < 0.01")
#c<-c("P =",pV)
#d<-ifelse(pV < 0.01,b,c)
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
}
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
# The Y is Response Var, X is Indp Var, Y is the Name of Y letter, X is so,
#the rev is to control what's the order of the mark. Which in the function:
#if (rev) {
#Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
TukeyTestFigure<- function(Y,X,Yletter,Xletter,rev = TRUE){
library(multcompView)
library(plotrix)
# Function to calculate the p value of F-test  (with Library(multcompView))
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
# Function to get the a-b-c letter by TUKEY test
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
if (rev) {
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
X<-as.factor(X)
# Dive the X factor into group
#X <- ordered(X,levels = Group)
#X<-Group
# Make the ANOVA
model<-lm(Y~X)
ANOVA<- aov(model)
# Make the Tukey test
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
# get the Letter Label
LABELS=generate_label_df(TUKEY,'X')
my_colors=c( rgb(143,199,74,maxColorValue = 255),rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255),rgb(254,188,18,maxColorValue = 255) , rgb(74,132,54,maxColorValue = 255))
# plot the Boxplot
a=boxplot(Y~X,ylim=c(min(Y),1.3*max(Y)),col=my_colors[as.numeric(LABELS[,1])],ylab=Yletter,xlab=Xletter)
over=0.1*max(a$stats[nrow(a$stats),])
text(c(1:nlevels(X)),a$stats[nrow(a$stats),]+over,LABELS[,1] ,col=my_colors[as.numeric(LABELS[,1])])
# Draw the F and P value  (with Library(plotrix))
pV<-round(lmp(model),5)
if (pV < 0.01) {
pV<-c("P < 0.01")
} else {
pV<-c("P =",pV)
}
#  pv<-if(pv < 0.01
# pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
#b<-c("P < 0.01")
#c<-c("P =",pV)
#d<-ifelse(pV < 0.01,b,c)
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pV),x=1,y=1)
}
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
pV<-round(lmp(model),5)
pV
if (pV < 0.01) {
pvalue<-c("P < 0.01")
} else {
pvalue<-c("P =",pV)
}
pvalue
# The Y is Response Var, X is Indp Var, Y is the Name of Y letter, X is so,
#the rev is to control what's the order of the mark. Which in the function:
#if (rev) {
#Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
TukeyTestFigure<- function(Y,X,Yletter,Xletter,rev = TRUE){
library(multcompView)
library(plotrix)
# Function to calculate the p value of F-test  (with Library(multcompView))
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
# Function to get the a-b-c letter by TUKEY test
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
if (rev) {
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
X<-as.factor(X)
# Dive the X factor into group
#X <- ordered(X,levels = Group)
#X<-Group
# Make the ANOVA
model<-lm(Y~X)
ANOVA<- aov(model)
# Make the Tukey test
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
# get the Letter Label
LABELS=generate_label_df(TUKEY,'X')
my_colors=c( rgb(143,199,74,maxColorValue = 255),rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255),rgb(254,188,18,maxColorValue = 255) , rgb(74,132,54,maxColorValue = 255))
# plot the Boxplot
a=boxplot(Y~X,ylim=c(min(Y),1.3*max(Y)),col=my_colors[as.numeric(LABELS[,1])],ylab=Yletter,xlab=Xletter)
over=0.1*max(a$stats[nrow(a$stats),])
text(c(1:nlevels(X)),a$stats[nrow(a$stats),]+over,LABELS[,1] ,col=my_colors[as.numeric(LABELS[,1])])
# Draw the F and P value  (with Library(plotrix))
pV<-round(lmp(model),5)
if (pV < 0.01) {
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),"P < 0.01"),x=1,y=1)
#pvalue<-c("P < 0.01")
} else {
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),"P =",pV),x=1,y=1)
}
#  pv<-if(pv < 0.01
# pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
#b<-c("P < 0.01")
#c<-c("P =",pV)
#d<-ifelse(pV < 0.01,b,c)
#corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pva),x=1,y=1)
}
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
# The Y is Response Var, X is Indp Var, Y is the Name of Y letter, X is so,
#the rev is to control what's the order of the mark. Which in the function:
#if (rev) {
#Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
#} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
TukeyTestFigure<- function(Y,X,Yletter,Xletter,rev = TRUE){
library(multcompView)
library(plotrix)
# Function to calculate the p value of F-test  (with Library(multcompView))
lmp<-function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
# Function to get the a-b-c letter by TUKEY test
generate_label_df<-function(TUKEY,variable){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels<-TUKEY[[variable]][,4]
if (rev) {
Tukey.labels<-data.frame(multcompLetters(Tukey.levels,rev = TRUE)['Letters'])
} else {Tukey.labels<-data.frame(multcompLetters(Tukey.levels)['Letters'])}
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment=rownames(Tukey.labels)
Tukey.labels=Tukey.labels[order(Tukey.labels$treatment),]
return(Tukey.labels)
}
X<-as.factor(X)
# Dive the X factor into group
#X <- ordered(X,levels = Group)
#X<-Group
# Make the ANOVA
model<-lm(Y~X)
ANOVA<- aov(model)
# Make the Tukey test
TUKEY<-TukeyHSD(x=ANOVA,'X',conf.level = 0.95)
# get the Letter Label
LABELS=generate_label_df(TUKEY,'X')
my_colors=c( rgb(143,199,74,maxColorValue = 255),rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255),rgb(254,188,18,maxColorValue = 255) , rgb(74,132,54,maxColorValue = 255))
# plot the Boxplot
a=boxplot(Y~X,ylim=c(min(Y),1.3*max(Y)),col=my_colors[as.numeric(LABELS[,1])],ylab=Yletter,xlab=Xletter)
over=0.1*max(a$stats[nrow(a$stats),])
text(c(1:nlevels(X)),a$stats[nrow(a$stats),]+over,LABELS[,1] ,col=my_colors[as.numeric(LABELS[,1])])
# Draw the F and P value  (with Library(plotrix))
pV<-round(lmp(model),5)
if (pV < 0.01) {
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),"P < 0.01"),x=1,y=1)
#pvalue<-c("P < 0.01")
} else {
corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),"P =",round(pV,3)),x=1,y=1)
}
#  pv<-if(pv < 0.01
# pV<-ifelse(pV < 0.01,c("P < 0.01"),c("P =",pV))
#b<-c("P < 0.01")
#c<-c("P =",pV)
#d<-ifelse(pV < 0.01,b,c)
#corner.label(label =paste("F =",round(summary(model)$fstatistic[1],3),pva),x=1,y=1)
}
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Y","X",rev= FALSE)
TukeyTestFigure(abv_S$coverage[-c(11,7,8)],abv_S$vt[-c(11,7,8)],"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$abd,abv_S$vt,"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$spRich,abv_S$vt,"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$abd,abv_S$vt,"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$abd[-c(22,24,14,48)],abv_S$vt[-c(22,24,14,48)],"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$abd[-c(22,24,14,48,46,41)],abv_S$vt[-c(22,24,14,48,46,41)],"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$abd[-c(22,24,14,48,46,41)],abv_S$vt[-c(22,24,14,48,46,41)],"Abundance","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$spRich,abv_S$vt,"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$spRich[20,17],abv_S$vt[20,17],"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$spRich[-c(20,17)],abv_S$vt[-c(20,17)],"Coverage","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_S$spRich[-c(20,17)],abv_S$vt[-c(20,17)],"Species Richness","Vegetation Type",rev= FALSE)
library(readxl)
abv_M <- read_excel("~/Desktop/AboveVegetation/abv-geo(rmM21-5|M11-3).xlsx",
sheet = "M")
View(abv_M)
attach(abv_M)
TukeyTestFigure(abv_M$spRich,abv_M$vt],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich,abv_M$vt,"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich[-c(9,14)],abv_M$vt[-c(9,14)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich[-c(9)],abv_M$vt[-c(9)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich[-c(14)],abv_M$vt[-c(14)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich[-c(9,14)],abv_M$vt[-c(9,14)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich[-c(3,9,14)],abv_M$vt[-c(3,9,14)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$coverage,abv_M$vt,"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$spRich,abv_M$vt,"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$abd,abv_M$vt,"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$abd[-c(15,63,2,12)],abv_M$vt[-c(15,63,2,12)],"Species Richness","Vegetation Type",rev= FALSE)
TukeyTestFigure(abv_M$abd,abv_M$vt,"Species Richness","Vegetation Type",rev= FALSE)
q()
q()
